"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Download, FileText, Database, Calendar } from "lucide-react"

interface AccelerometerData {
  timestamp: number
  accelerometer1: { x: number; y: number; z: number }
  accelerometer2: { x: number; y: number; z: number }
  magnitude1: number
  magnitude2: number
  impactSeverity: "LOW" | "MODERATE" | "HIGH" | "CRITICAL"
}

interface DataExportProps {
  data: AccelerometerData[]
}

export function DataExport({ data }: DataExportProps) {
  const exportToCSV = () => {
    const headers = [
      "Timestamp",
      "DateTime",
      "Accel1_X",
      "Accel1_Y",
      "Accel1_Z",
      "Accel2_X",
      "Accel2_Y",
      "Accel2_Z",
      "Magnitude1",
      "Magnitude2",
      "Impact_Severity",
    ]

    const csvContent = [
      headers.join(","),
      ...data.map((row) =>
        [
          row.timestamp,
          new Date(row.timestamp).toISOString(),
          row.accelerometer1.x.toFixed(4),
          row.accelerometer1.y.toFixed(4),
          row.accelerometer1.z.toFixed(4),
          row.accelerometer2.x.toFixed(4),
          row.accelerometer2.y.toFixed(4),
          row.accelerometer2.z.toFixed(4),
          row.magnitude1.toFixed(4),
          row.magnitude2.toFixed(4),
          row.impactSeverity,
        ].join(","),
      ),
    ].join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `axion-data-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const exportToJSON = () => {
    const jsonContent = JSON.stringify(
      {
        exportDate: new Date().toISOString(),
        deviceInfo: {
          device: "AXION Rugby Headband",
          sensors: 2,
          samplingRate: "10Hz",
        },
        sessionSummary: {
          totalDataPoints: data.length,
          duration: data.length > 0 ? (data[data.length - 1].timestamp - data[0].timestamp) / 1000 : 0,
          highImpacts: data.filter((d) => d.impactSeverity === "HIGH" || d.impactSeverity === "CRITICAL").length,
        },
        data: data,
      },
      null,
      2,
    )

    const blob = new Blob([jsonContent], { type: "application/json" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `axion-session-${new Date().toISOString().split("T")[0]}.json`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const exportMedicalReport = () => {
    const highImpacts = data.filter((d) => d.impactSeverity === "HIGH" || d.impactSeverity === "CRITICAL")
    const maxImpact = Math.max(...data.map((d) => Math.max(d.magnitude1, d.magnitude2)), 0)

    const reportContent = `
AXION CONCUSSION MONITORING REPORT
Generated: ${new Date().toLocaleString()}

SESSION SUMMARY
===============
Total Data Points: ${data.length.toLocaleString()}
Session Duration: ${data.length > 0 ? Math.round((data[data.length - 1].timestamp - data[0].timestamp) / 1000) : 0} seconds
Peak Impact: ${maxImpact.toFixed(2)}g
High Impact Events: ${highImpacts.length}

IMPACT ANALYSIS
===============
Low Impact (0-10g): ${data.filter((d) => d.impactSeverity === "LOW").length}
Moderate Impact (10-15g): ${data.filter((d) => d.impactSeverity === "MODERATE").length}
High Impact (15-30g): ${data.filter((d) => d.impactSeverity === "HIGH").length}
Critical Impact (>30g): ${data.filter((d) => d.impactSeverity === "CRITICAL").length}

HIGH IMPACT EVENTS
==================
${highImpacts
  .map(
    (impact, index) =>
      `${index + 1}. ${new Date(impact.timestamp).toLocaleTimeString()} - ${Math.max(impact.magnitude1, impact.magnitude2).toFixed(2)}g (${impact.impactSeverity})`,
  )
  .join("\n")}

MEDICAL RECOMMENDATIONS
=======================
${
  highImpacts.length === 0
    ? "No significant impacts detected. Continue normal monitoring."
    : highImpacts.some((i) => i.impactSeverity === "CRITICAL")
      ? "CRITICAL: Immediate medical assessment required."
      : highImpacts.length >= 3
        ? "CAUTION: Multiple high impacts detected. Consider medical evaluation."
        : "MONITOR: High impact detected. Watch for symptoms."
}

This report was generated by AXION Concussion Tracking System.
For medical interpretation, consult with qualified healthcare professionals.
    `.trim()

    const blob = new Blob([reportContent], { type: "text/plain" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `axion-medical-report-${new Date().toISOString().split("T")[0]}.txt`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const sessionStats = {
    duration: data.length > 0 ? Math.round((data[data.length - 1].timestamp - data[0].timestamp) / 1000) : 0,
    highImpacts: data.filter((d) => d.impactSeverity === "HIGH" || d.impactSeverity === "CRITICAL").length,
    maxImpact: Math.max(...data.map((d) => Math.max(d.magnitude1, d.magnitude2)), 0),
  }

  return (
    <div className="space-y-6">
      {/* Session Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Database className="w-5 h-5" />
            <span>Session Summary</span>
          </CardTitle>
          <CardDescription>Overview of current monitoring session</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold">{data.length.toLocaleString()}</div>
              <div className="text-sm text-gray-500">Data Points</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">
                {Math.floor(sessionStats.duration / 60)}:{(sessionStats.duration % 60).toString().padStart(2, "0")}
              </div>
              <div className="text-sm text-gray-500">Duration</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{sessionStats.highImpacts}</div>
              <div className="text-sm text-gray-500">High Impacts</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">{sessionStats.maxImpact.toFixed(1)}g</div>
              <div className="text-sm text-gray-500">Peak Impact</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Export Options */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="w-5 h-5" />
              <span>Raw Data (CSV)</span>
            </CardTitle>
            <CardDescription>Complete dataset for analysis</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Badge variant="outline">All sensor readings</Badge>
              <Badge variant="outline">Timestamp data</Badge>
              <Badge variant="outline">Impact classifications</Badge>
            </div>
            <Button onClick={exportToCSV} className="w-full" disabled={data.length === 0}>
              <Download className="w-4 h-4 mr-2" />
              Export CSV
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Database className="w-5 h-5" />
              <span>Session Data (JSON)</span>
            </CardTitle>
            <CardDescription>Structured data with metadata</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Badge variant="outline">Session metadata</Badge>
              <Badge variant="outline">Device information</Badge>
              <Badge variant="outline">Summary statistics</Badge>
            </div>
            <Button onClick={exportToJSON} className="w-full" disabled={data.length === 0}>
              <Download className="w-4 h-4 mr-2" />
              Export JSON
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Calendar className="w-5 h-5" />
              <span>Medical Report</span>
            </CardTitle>
            <CardDescription>Clinical summary for healthcare providers</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Badge variant="outline">Impact analysis</Badge>
              <Badge variant="outline">Risk assessment</Badge>
              <Badge variant="outline">Recommendations</Badge>
            </div>
            <Button onClick={exportMedicalReport} className="w-full" disabled={data.length === 0}>
              <Download className="w-4 h-4 mr-2" />
              Export Report
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Data Preview */}
      {data.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Data Preview</CardTitle>
            <CardDescription>Last 5 data points from current session</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">Time</th>
                    <th className="text-left p-2">Sensor 1 (g)</th>
                    <th className="text-left p-2">Sensor 2 (g)</th>
                    <th className="text-left p-2">Severity</th>
                  </tr>
                </thead>
                <tbody>
                  {data.slice(-5).map((row, index) => (
                    <tr key={index} className="border-b">
                      <td className="p-2 font-mono">{new Date(row.timestamp).toLocaleTimeString()}</td>
                      <td className="p-2 font-mono">{row.magnitude1.toFixed(2)}</td>
                      <td className="p-2 font-mono">{row.magnitude2.toFixed(2)}</td>
                      <td className="p-2">
                        <Badge
                          className={
                            row.impactSeverity === "CRITICAL"
                              ? "bg-red-500"
                              : row.impactSeverity === "HIGH"
                                ? "bg-orange-500"
                                : row.impactSeverity === "MODERATE"
                                  ? "bg-yellow-500"
                                  : "bg-green-500"
                          }
                        >
                          {row.impactSeverity}
                        </Badge>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
